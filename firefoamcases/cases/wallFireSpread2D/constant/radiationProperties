/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      radiationProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

radiation       on;

radiationModel  fvDOM;
//radiationModel  P1;

noRadiation
{
}

P1Coeffs
{
}

fvDOMCoeffs
{
/*
    nPhi    3;          // azimuthal angles in PI/2 on X-Y.(from Y to X)
    nTheta  5;          // polar angles in PI (from Z to X-Y plane)
    convergence 1e-3;   // convergence criteria for radiation iteration
    maxIter 10;         // maximum number of iterations
*/
    nPhi    2; //3;          // azimuthal angles in PI/2 on X-Y.(from Y to X)
    nTheta  2; //4;          // polar angles in PI (from Z to X-Y plane)
    convergence 1e-3;   // convergence criteria for radiation iteration
    maxIter 5;         // maximum number of iterations
}

// Number of flow iterations per radiation iteration
solverFreq 10;

//absorptionEmissionModel constantAbsorptionEmission;
//absorptionEmissionModel greyMeanAbsorptionEmission;
absorptionEmissionModel constRadFractionEmission;

constantAbsorptionEmissionCoeffs
{
    a               a [ 0 -1 0 0 0 0 0 ] 0.1; //0.01
    e               e [ 0 -1 0 0 0 0 0 ] 0;
    E               E [ 1 -1 -3 0 0 0 0 ] 0;
}

greyMeanAbsorptionEmissionCoeffs
{
    //Name of the table containing species in moles in function of ft for IFC.
    lookUpTableFileName     none; //"SpeciesTable";
    //Proportionality constant (EhrrCoeff*HRR) to be emitted. Source term in
    //RTE
    EhrrCoeff                0.6;  
}

constRadFractionEmissionCoeffs
{
    //Proportionality constant (EhrrCoeff*HRR) to be emitted. Source term in
    //RTE
    EhrrCoeff                0.6;  
    radScaling		true;  //false;
    Ehrr1               0.6;
    Ehrr2		0.3;
    patch1		(burner);
    patch2		(region0_to_panelRegion_panel);
}

scatterModel    constantScatter;

constantScatterCoeffs
{
    sigma           sigma [ 0 -1 0 0 0 0 0 ] 0;
    C               C [ 0 0 0 0 0 0 0 ] 0;
}


// ************************************************************************* //
